[
  {
    "role": "user",
    "content": "hello"
  },
  {
    "role": "assistant",
    "content": "Great! Let's capture your basic details one by one. First, **what's your full name?**"
  },
  {
    "role": "user",
    "content": "Glen Maxwell"
  },
  {
    "role": "assistant",
    "content": "Great, now your **email**?"
  },
  {
    "role": "user",
    "content": "glen@gmail.com"
  },
  {
    "role": "assistant",
    "content": "Thanks! What's your **work experience** (e.g., '3 years')?"
  },
  {
    "role": "user",
    "content": "4 years"
  },
  {
    "role": "assistant",
    "content": "Which **position** are you aiming for?"
  },
  {
    "role": "user",
    "content": "SDE"
  },
  {
    "role": "assistant",
    "content": "Finally, list your **tech stack** (comma-separated)."
  },
  {
    "role": "user",
    "content": "java, sql, .net"
  },
  {
    "role": "assistant",
    "content": "Thanks! Your details are recorded. Let's begin the interview."
  },
  {
    "role": "assistant",
    "content": "Question 1/10: Explain the difference between a relational database and a NoSQL database, and give an example of each."
  },
  {
    "role": "user",
    "content": "A relational database organizes data into structured tables with predefined schemas and supports SQL for queries, for example MySQL, while a NoSQL database stores unstructured or semi-structured data in flexible formats like key-value, document, or graph, for example MongoDB."
  },
  {
    "role": "assistant",
    "content": "Question 2/10: Describe the difference between a thread and a process, and give an example of each."
  },
  {
    "role": "user",
    "content": "A process is an independent program with its own memory space and resources, for example running Chrome and Python at the same time, while a thread is a smaller unit of execution within a process that shares the same memory space, for example multiple tabs running inside Chrome as separate threads.\n"
  },
  {
    "role": "assistant",
    "content": "Question 3/10: Explain the difference between a JVM and a CLR, and give an example of each."
  },
  {
    "role": "user",
    "content": "The Java Virtual Machine (JVM) is a runtime environment that executes Java bytecode and makes Java programs platform independent, for example running a Java program compiled into .class files, while the Common Language Runtime (CLR) is the runtime environment for .NET languages that manages execution, memory, and security, for example running a C# program compiled into Intermediate Language (IL).\n"
  },
  {
    "role": "assistant",
    "content": "Question 4/10: Describe the difference between a HashMap and a HashSet, and give an example of each."
  },
  {
    "role": "user",
    "content": "A HashMap stores key-value pairs where each key maps to a specific value, for example storing student IDs as keys and names as values, while a HashSet stores only unique values without duplicates, for example storing a collection of unique email addresses."
  },
  {
    "role": "assistant",
    "content": "Question 5/10: Explain the difference between a SQL query and a LINQ query, and give an example of each."
  },
  {
    "role": "user",
    "content": "A SQL query is written in Structured Query Language and executed directly on a database to retrieve or manipulate data, for example `SELECT name FROM Employees WHERE age > 30;`, while a LINQ query is written in C# or other .NET languages to query collections or databases in an object-oriented way, for example `var result = from e in Employees where e.Age > 30 select e.Name;`."
  },
  {
    "role": "assistant",
    "content": "Question 6/10: Describe the difference between a Java class and a .NET class, and give an example of each."
  },
  {
    "role": "user",
    "content": "A Java class is defined in the Java programming language and runs on the JVM, for example `class Student { String name; void display() { System.out.println(name); } }`, while a .NET class is defined in a .NET language like C# and runs on the CLR, for example `class Student { public string Name; public void Display() { Console.WriteLine(Name); } }`.\n"
  },
  {
    "role": "assistant",
    "content": "Question 7/10: Explain the difference between a constructor and a static method, and give an example of each."
  },
  {
    "role": "user",
    "content": "A constructor is a special method that is automatically called when an object is created to initialize its state, for example in Java `Student(String name) { this.name = name; }`, while a static method belongs to the class rather than an instance and can be called without creating an object, for example in Java `static void showInfo() { System.out.println(\"Static method\"); }`."
  },
  {
    "role": "assistant",
    "content": "Question 8/10: Describe the difference between inheritance and polymorphism, and give an example of each."
  },
  {
    "role": "user",
    "content": "Inheritance is when one class derives from another to reuse its properties and methods, for example `class Dog extends Animal {}` where Dog inherits from Animal, while polymorphism allows methods with the same name to behave differently depending on the object, for example `animal.sound()` producing a bark for Dog and a meow for Cat.\n"
  },
  {
    "role": "assistant",
    "content": "Question 9/10: Explain the difference between a linked list and a binary tree, and give an example of each."
  },
  {
    "role": "user",
    "content": "A linked list is a linear data structure where each node contains data and a pointer to the next node, for example `10 -> 20 -> 30`, while a binary tree is a hierarchical data structure where each node has at most two children (left and right), for example a root node 10 with left child 5 and right child 15.\n"
  },
  {
    "role": "assistant",
    "content": "Question 10/10: Describe the difference between a thread pool and a thread, and give an example of each."
  },
  {
    "role": "user",
    "content": "A thread is a single unit of execution within a process that runs independently, for example starting a new thread in Java with `new Thread(() -> doWork()).start();`, while a thread pool is a collection of reusable threads managed by a framework to efficiently handle multiple tasks without creating new threads each time, for example using `ExecutorService executor = Executors.newFixedThreadPool(5);`."
  },
  {
    "role": "assistant",
    "content": "Thanks for completing all questions. Evaluating your responses… ⏳"
  }
]